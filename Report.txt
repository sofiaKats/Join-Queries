Report

Ιδέες για Βελτιώσεις:


1) Μια ιδέα βελτίωσης ήταν η χρήση συνδεδεμένων λιστών ως κύρια δομή της ενδιάμεσης σχέσης usedRelations.
Ο λόγος ήταν οτι ο πίνακας που χρησιμοποιούμε είναι πολύ μεγαλύτερος απ΄ ότι χρειάζεται, σε κάποιες περιπτώσεις
1 εκ αντί για 14.000 στοιχεία, με αποτέλεσμα να πρέπει να ψάχνουμε όλα τα κελιά για τις μη κενές εγγραφές.
Το μέγεθος του ορίζεται από το neighborhood * το μέγεθος του μεγαλύτερου πίνακα. Επομένως κρίνεται απαραίτητη μια
δομή που είναι δυναμική. Η υλοποίηση έχει γίνει στο branch Part3-LL. Για κακή μας τύχη η δομή ήταν πιο αργή 1-3 δεύτερα.
Δεν μπορούμε να καταλάβουμε με σιγουριά που οφείλεται αυτό.

2) Μια άλλη ιδέα προέκυψε από το γεγονός ότι η PartitionHashJoin δημιουργεί hashtable μόνο για το πρώτο(δεξιά) Relation και
με ένα ένα τα στοιχεία του δεύτερου βρίσκει τα κοινά. Αυτό έχει ως αποτέλεσμα ότι τα στοιχεία του αριστερού πίνακα είναι
ταξινομημένα σε πακέτα των ίδιων rowid πχ

-Matches-
R   S
-----
2   3
4   3
12  3
51  4
56  4
56  5
12  9

Όταν ενημερώνουμε την usedRelations κοιτάμε αν ένα ένα τα στοιχεία της υπάρχουν στα Matches. Αν μόνο η S είναι
στη usedRelations και ψάχνουμε για έναν αριθμό πχ 3 τότε μπορούμε όσο βλέπουμε τον αριθμό 3 στα Matches να προσθέτουμε
τα στοιχεία και όταν αλλάζει να σταματάμε το ψάξιμο. Αν αντί για την S είναι η R στα usedRelations θα πρέπει αναγκαστικά
να ψάξουμε όλα τα Matches.

Η ιδέα ήταν να ορίζουμε τον πίνακα S στην PartitionHashJoin ώς πάντα αυτός που έιναι στην usedRelations.
Αλλά το πρόγραμμα έγινε 2 φορές πιο αργό (14s < 33s), πιστεύαμε οφείλοταν στην δημιουργία μεγάλων hashtables γιατί κάποια αρχέια
είναι πολύ μεγαλύτερα και πριν ήταν στα δεξιά της ισότητας(1.0 = 2.2) με αποτέλεσμα να μην έχουν hashtables.

Άρα προέκυψε και μία ακόμα ιδέα, να φτιάχνουμε hashtable για τον μικρότερο πίνακα κάθε φορά. Ο χρόνος ήταν πάλι χειρότερος αλλά
υπήρχε βελτίωση σχετικά με την πρώτη ιδέα (14 < 26 < 33).
